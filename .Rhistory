# Catch *and* save both errors and warnings, and in the case of
# a warning, also keep the computed result.
# @title tryCatch both warnings (with value) and errors
# @param expr an \R expression to evaluate
# @return a list with 'value' and 'warning', where 'value' may be an error caught.
# @author Martin Maechler;
# Copyright (C) 2010-2012  The R Core Team
tryCatch.W.E <- function(expr) {
W <- NULL
w.handler <- function(w) { # warning handler
W <<- w
invokeRestart("muffleWarning")
}
list(value = withCallingHandlers(tryCatch(expr, error = function(e) e),
warning = w.handler),
warning = W)
}
str(tryCatch.W.E(log(2)))
str(tryCatch.W.E(log(-1)))
str(tryCatch.W.E(log("a")))
demo(is.things)
# Copyright (C) 1997-2013 The R Core Team
# being a 'builtin' function is not the same as being in base
ls.base <- ls("package:base", all=TRUE)
base.is.f <- sapply(ls.base, function(x) is.function(get(x)))
cat("\nNumber of base objects:\t\t", length(ls.base),
"\nNumber of functions in base:\t", sum(base.is.f),
"\n\t starting with 'is.' :\t  ",
sum(grepl("^is\\.", ls.base[base.is.f])), "\n", sep = "")
# Do we have a method (probably)?
is.method <- function(fname) {
isFun <- function(name) (exists(name, mode="function") &&
is.na(match(name, c("is", "as"))))
np <- length(sp <- strsplit(fname, split = "\\.")[[1]])
if(np <= 1) FALSE
else(isFun(paste(sp[1:(np - 1)], collapse = '.')) ||
(np >= 3 && isFun(paste(sp[1:(np - 2)], collapse = '.'))))
}
is.ALL <- function(obj, func.names = ls(pos = length(search())),
not.using = c("is.single", "is.real", "is.loaded",
"is.empty.model", "is.R", "is.element", "is.unsorted"),
true.only = FALSE, debug = FALSE) {
# Purpose: show many 'attributes' of  R object __obj__
# Arguments: obj: any R object
# Author: Martin Maechler, Date: 6 Dec 1996
is.fn <- func.names[substring(func.names, 1, 3) == "is."]
is.fn <- is.fn[substring(is.fn, 1, 7) != "is.na<-"]
use.fn <- is.fn[is.na(match(is.fn, not.using)) & !sapply(is.fn, is.method)]
r <- if(true.only) character(0)
else structure(vector("list", length = length(use.fn)), names = use.fn)
for(f in use.fn) {
if(any(f == c("is.na", "is.finite"))) {
if(!is.list(obj) && !is.vector(obj) && !is.array(obj)) {
if(!true.only) r[[f]] <- NA
next
}
}
if(any(f == c("is.nan", "is.finite", "is.infinite"))) {
if(!is.atomic(obj)) {
if(!true.only) r[[f]] <- NA
next
}
}
if(debug) cat(f, "")
fn <- get(f)
rr <- if(is.primitive(fn) || length(formals(fn)) > 0) fn(obj) else fn()
if(!is.logical(rr)) cat("f=", f, " --- rr	 is NOT logical	 = ", rr, "\n")
#if(1 != length(rr)) cat("f=", f, " --- rr NOT of length 1; = ", rr, "\n")
if(true.only && length(rr) == 1 && !is.na(rr) && rr) r <- c(r, f)
else if(!true.only) r[[f]] <- rr
}
if(debug) cat("\n")
if(is.list(r)) structure(r, class = "isList") else r
}
print.isList <- function(x, ..., verbose = getOption("verbose")) {
# Purpose:	 print METHOD  for `isList' objects
# Author: Martin Maechler, Date: 12 Mar 1997
if(is.list(x)) {
if(verbose) cat("print.isList(): list case (length =", length(x), ")\n")
nm <- format(names(x))
rr <- lapply(x, stats::symnum, na = "NA")
for(i in seq_along(x)) cat(nm[i], ":", rr[[i]], "\n", ...)
} else NextMethod("print", ...)
}
is.ALL(NULL)
#fails: is.ALL(NULL, not.using = c("is.single", "is.loaded"))
is.ALL(NULL, true.only = TRUE)
all.equal(NULL, pairlist())
## list() != NULL == pairlist() :
is.ALL(list(), true.only = TRUE)
(pl <- is.ALL(pairlist(1, list(3, "A")), true.only = TRUE))
(ll <- is.ALL(list(1,pairlist(3, "A")), true.only = TRUE))
all.equal(pl[pl != "is.pairlist"], ll[ll != "is.vector"]) # TRUE
is.ALL(1:5)
is.ALL(array(1:24, 2:4))
is.ALL(1 + 3)
e13 <- expression(1 + 3)
is.ALL(e13)
is.ALL(substitute(expression(a + 3), list(a = 1)), true.only = TRUE)
is.ALL(y ~ x)  # --> NA	for is.na & is.finite
is0 <- is.ALL(numeric(0))
is0.ok <- 1 == (lis0 <- sapply(is0, length))
is0[!is0.ok]
is0 <- unlist(is0)
is0
ispi <- unlist(is.ALL(pi))
all(ispi[is0.ok] == is0)
is.ALL(numeric(0), true = TRUE)
is.ALL(array(1,1:3), true = TRUE)
is.ALL(cbind(1:3), true = TRUE)
is.ALL(structure(1:7, names = paste("a", 1:7, sep = "")))
is.ALL(structure(1:7, names = paste("a", 1:7, sep = "")), true.only = TRUE)
x <- 1:20
y <- 5 + 6*x + rnorm(20)
lm.xy <- lm(y ~ x)
is.ALL(lm.xy)
is.ALL(structure(1:7, names = paste("a", 1:7, sep = "")))
is.ALL(structure(1:7, names = paste("a", 1:7, sep = "")), true.only = TRUE)
demo(recursion)
# Copyright (C) 1997-2013 The R Core Team
# being a 'builtin' function is not the same as being in base
ls.base <- ls("package:base", all = TRUE)
base.is.f <- sapply(ls.base, function(x) is.function(get(x)))
cat("\nNumber of base objects:\t\t", length(ls.base),
"\nNumber of functions in base:\t", sum(base.is.f),
"\n\t starting with 'is.' :\t  ",
sum(grepl("^is\\.", ls.base[base.is.f])), "\n", sep = "")
# Do we have a method (probably)?
is.method <- function(fname) {
isFun <- function(name) (exists(name, mode = "function") &&
is.na(match(name, c("is", "as"))))
np <- length(sp <- strsplit(fname, split = "\\.")[[1]])
if(np <= 1) FALSE
else(isFun(paste(sp[1:(np - 1)], collapse = '.')) ||
(np >= 3 && isFun(paste(sp[1:(np - 2)], collapse = '.'))))
}
is.ALL <- function(obj, func.names = ls(pos = length(search())),
not.using = c("is.single", "is.real", "is.loaded",
"is.empty.model", "is.R", "is.element", "is.unsorted"),
true.only = FALSE, debug = FALSE) {
# Purpose: show many 'attributes' of  R object __obj__
# Arguments: obj: any R object
# Author: Martin Maechler, Date: 6 Dec 1996
is.fn <- func.names[substring(func.names, 1, 3) == "is."]
is.fn <- is.fn[substring(is.fn, 1, 7) != "is.na<-"]
use.fn <- is.fn[is.na(match(is.fn, not.using)) & !sapply(is.fn, is.method)]
r <- if(true.only) character(0)
else structure(vector("list", length = length(use.fn)), names = use.fn)
for(f in use.fn) {
if(any(f == c("is.na", "is.finite"))) {
if(!is.list(obj) && !is.vector(obj) && !is.array(obj)) {
if(!true.only) r[[f]] <- NA
next
}
}
if(any(f == c("is.nan", "is.finite", "is.infinite"))) {
if(!is.atomic(obj)) {
if(!true.only) r[[f]] <- NA
next
}
}
if(debug) cat(f, "")
fn <- get(f)
rr <- if(is.primitive(fn) || length(formals(fn)) > 0) fn(obj) else fn()
if(!is.logical(rr)) cat("f=", f, " --- rr	 is NOT logical	 = ", rr, "\n")
#if(1 != length(rr)) cat("f=", f, " --- rr NOT of length 1; = ", rr, "\n")
if(true.only && length(rr) == 1 && !is.na(rr) && rr) r <- c(r, f)
else if(!true.only) r[[f]] <- rr
}
if(debug) cat("\n")
if(is.list(r)) structure(r, class = "isList") else r
}
print.isList <- function(x, ..., verbose = getOption("verbose")) {
# Purpose:	 print METHOD  for `isList' objects
# Author: Martin Maechler, Date: 12 Mar 1997
if(is.list(x)) {
if(verbose) cat("print.isList(): list case (length =", length(x), ")\n")
nm <- format(names(x))
rr <- lapply(x, stats::symnum, na = "NA")
for(i in seq_along(x)) cat(nm[i], ":", rr[[i]], "\n", ...)
} else NextMethod("print", ...)
}
is.ALL(NULL)
#fails: is.ALL(NULL, not.using = c("is.single", "is.loaded"))
is.ALL(NULL, true.only = TRUE)
all.equal(NULL, pairlist())
## list() != NULL == pairlist() :
is.ALL(list(), true.only = TRUE)
(pl <- is.ALL(pairlist(1, list(3, "A")), true.only = TRUE))
(ll <- is.ALL(list(1,pairlist(3, "A")), true.only = TRUE))
all.equal(pl[pl != "is.pairlist"], ll[ll != "is.vector"]) # TRUE
is.ALL(1:5)
is.ALL(array(1:24, 2:4))
is.ALL(1 + 3)
e13 <- expression(1 + 3)
is.ALL(e13)
is.ALL(substitute(expression(a + 3), list(a = 1)), true.only = TRUE)
is.ALL(y ~ x)  # --> NA	for is.na & is.finite
is0 <- is.ALL(numeric(0))
is0.ok <- 1 == (lis0 <- sapply(is0, length))
is0[!is0.ok]
is0 <- unlist(is0)
is0
ispi <- unlist(is.ALL(pi))
all(ispi[is0.ok] == is0)
is.ALL(numeric(0), true = TRUE)
is.ALL(array(1, 1:3), true = TRUE)
is.ALL(cbind(1:3), true = TRUE)
is.ALL(structure(1:7, names = paste("a", 1:7, sep = "")))
is.ALL(structure(1:7, names = paste("a", 1:7, sep = "")), true.only = TRUE)
x <- 1:20
y <- 5 + 6*x + rnorm(20)
lm.xy <- lm(y ~ x)
is.ALL(lm.xy)
is.ALL(structure(1:7, names = paste("a", 1:7, sep = "")))
is.ALL(structure(1:7, names = paste("a", 1:7, sep = "")), true.only = TRUE)
# Copyright (C) 1997-2005 The R Core Team
# Adaptive integration:	 Venables and Ripley pp. 105-110
# This is the basic integrator.
area <- function(f, a, b, ..., fa = f(a, ...), fb = f(b, ...), limit = 10, eps = 1.e-5) {
h <- b - a
d <- (a + b)/2
fd <- f(d, ...)
a1 <- ((fa + fb) * h)/2
a2 <- ((fa + 4 * fd + fb) * h)/6
if(abs(a1 - a2) < eps) return(a2)
if(limit == 0) {
warning(paste("iteration limit reached near x = ", d))
return(a2)
}
area(f, a, d, ..., fa = fa, fb = fd, limit = limit - 1, eps = eps) +
area(f, d, b, ..., fa = fd, fb = fb, limit = limit - 1, eps = eps)
}
# The function to be integrated
fbeta <- function(x, alpha, beta) {
x^(alpha - 1)*(1 - x)^(beta - 1)
}
# Compute the approximate integral, the exact integral and the error
b0 <- area(fbeta, 0, 1, alpha = 3.5, beta = 1.5)
b1 <- exp(lgamma(3.5) + lgamma(1.5) - lgamma(5))
c(b0, b1, b0 - b1)
# Modify the function so that it records where it was evaluated
fbeta.tmp <- function (x, alpha, beta) {
val <<- c(val, x)
x^(alpha - 1)*(1 - x)^(beta - 1)
}
# Recompute and plot the evaluation points.
val <- NULL
b0 <- area(fbeta.tmp, 0, 1, alpha = 3.5, beta = 1.5)
plot(val, fbeta(val, 3.5, 1.5), pch = 0)
# Better programming style -- renaming the function will have no effect.
# The use of "Recall" as in V+R is VERY black magic.  You can get the
# same effect transparently by supplying a wrapper function.
# This is the approved Abelson+Sussman method.
area <- function(f, a, b, ..., limit = 10, eps = 1e-5) {
area2 <- function(f, a, b, ..., fa = f(a, ...), fb = f(b, ...), limit = limit, eps = eps) {
h <- b - a
d <- (a + b)/2
fd <- f(d, ...)
a1 <- ((fa + fb) * h)/2
a2 <- ((fa + 4 * fd + fb) * h)/6
if(abs(a1 - a2) < eps) return(a2)
if(limit == 0) {
warning(paste("iteration limit reached near x =", d))
return(a2)
}
area2(f, a, d, ..., fa = fa, fb = fd, limit = limit - 1, eps = eps) +
area2(f, d, b, ..., fa = fd, fb = fb, limit = limit - 1, eps = eps)
}
area2(f, a, b, ..., limit=limit, eps=eps)
}
A <- matrix(c(1, 2, 3, 4), ncol = 2)
A
A <- matrix(c(1, 2, 3, 4), byrow = TRUE, ncol = 2)
A
B <- matrix(c(5, 6, 7, 8), byrow = TRUE, ncol = 2)
B
A %*% B
install.packages("leaps")
install.packages("glmnet")
install.packages("pls")
install.packages("tree")
install.packages("randomForest")
install.packages("gbm")
#library(ISLR)
#attach(Carseats)
Carseats$High <- ifelse(Carseats$Sales <= 8, "No", "Yes")
#library(ISLR)
#attach(Carseats)
data(Carseats)
Carseats$High <- ifelse(Carseats$Sales <= 8, "No", "Yes")
library(tree)
library(ISLR)
library(MASS)
library(randomForest)
library(gbm)
#library(ISLR)
#attach(Carseats)
Carseats$High <- ifelse(Carseats$Sales <= 8, "No", "Yes")
tree.carseats <- tree(High ~ . -Sales, Carseats)
summary(tree.carseats)
summary(tree.carseats)
tree.carseats
str(Carseats)
table(Carseats$High)
tree.carseats <- tree(High ~ . -Sales, data = Carseats)
tree.carseats <- tree(High ~ . -Sales, data = Carseats)
tree.carseats <- tree(High ~ . -Sales, data = Carseats)
#library(ISLR)
#attach(Carseats)
Carseats$High <- as.factor(ifelse(Carseats$Sales <= 8, "No", "Yes"))
tree.carseats <- tree(High ~ . -Sales, data = Carseats)
summary(tree.carseats)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train, ]
High.test <- Carseats$High[-train]
tree.carseats <- tree(High ~ . -Sales, Carseats, subset = train)
tree.pred <- predict(tree.carseats, Carseats.test, type = "class")
table(tree.pred, High.test)
(86 + 57)/200
boost.boston <- gbm(medv ~ ., data = Boston[train, ], distribution = "gaussian", n.trees = 5000, interaction.depth = 4, shrinkage = 0.2, verbose = FALSE)
yhat.boost <- predict(boost.boston, newdata = Boston[-train, ], n.trees = 5000)
mean((yhat.boost - boston.test)^2)
library(e1071)
install.packages("e1071")
library(e1071)
library(ROCR)
install.packages("ROCR")
library(e1071)
library(ROCR)
library(ISLR)
set.seed(1)
x <- matrix(rnorm(20*2), ncol = 2)
y <- c(rep(-1, 10), rep(1, 10))
x[y == 1, ] <- x[y == 1, ] + 1
plot(x, col = (3 - y))
set.seed(1)
x <- matrix(rnorm(20*2), ncol = 2)
y <- c(rep(-1, 10), rep(1, 10))
x[y == 1, ] <- x[y == 1, ] + 1
plot(x, col = (3 - y))
dat <- data.frame(x = x, y = as.factor(y))
#library(e1071)
svmfit <- svm(y∼ ., data = dat, kernel = "linear", cost = 10, scale = FALSE)
dat <- data.frame(x = x, y = as.factor(y))
#library(e1071)
svmfit <- svm(y ~ ., data = dat, kernel = "linear", cost = 10, scale = FALSE)
plot(svmfit, dat)
svmfit$index
summary(svmfit)
svmfit <- svm(y ~ ., data = dat, kernel = "linear", cost = 0.1, scale = FALSE)
plot(svmfit, dat)
svmfit$index
set.seed(1)
tune.out <- tune(svm, y ~ ., data = dat, kernel = "linear", ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
set.seed(1)
tune.out <- tune(svm, y ~ ., data = dat, kernel = "linear", ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune.out)
bestmod <- tune.out$best.model
summary(bestmod)
xtest <- matrix(rnorm(20*2), ncol = 2)
ytest <- sample(c(-1, 1), 20, rep = TRUE)
xtest[ytest == 1, ] <- xtest[ytest == 1, ] + 1
testdat <- data.frame(x = xtest, y = as.factor(ytest))
ypred <- predict(bestmod, testdat)
table(predict = ypred, truth = testdat$y)
svmfit <- svm(y ~ ., data = dat, kernel = "linear", cost = 0.01, scale = FALSE)
ypred <- predict(svmfit, testdat)
table(predict = ypred, truth = testdat$y)
x[y == 1, ] <- x[y == 1, ] + 0.5
plot(x, col = (y + 5)/2, pch = 19)
x[y == 1, ] <- x[y == 1, ] + 0.5
plot(x, col = (y + 5)/2, pch = 19)
dat <- data.frame(x = x, y = as.factor(y))
svmfit <- svm(y ~ ., data = dat, kernel = "linear", cost = 1e5)
summary(svmfit)
plot(svmfit, dat)
svmfit <- svm(y ~ ., data = dat, kernel = "linear", cost = 1)
summary(svmfit)
plot(svmfit, dat)
set.seed(1)
x <- matrix(rnorm(200*2), ncol = 2)
x[1:100, ] <- x[1:100, ] + 2
x[101:150, ] <- x[101:150, ] - 2
y <- c(rep(1, 150), rep(2, 50))
dat <- data.frame(x = x, y = as.factor(y))
plot(x, col = y)
plot(x, col = y)
train <- sample(200, 100)
svmfit <- svm(y ∼ ., data = dat[train, ], kernel = "radial", gamma = 1, cost = 1)
train <- sample(200, 100)
svmfit <- svm(y ~ ., data = dat[train, ], kernel = "radial", gamma = 1, cost = 1)
plot(svmfit, dat[train, ])
summary(svmfit)
svmfit <- svm(y ∼ ., data = dat[train, ], kernel = "radial", gamma = 1, cost = 1e5)
svmfit <- svm(y ~ ., data = dat[train, ], kernel = "radial", gamma = 1, cost = 1e5)
plot(svmfit, dat[train, ])
set.seed(1)
tune.out <- tune(svm, y ∼ ., data = dat[train, ], kernel = "radial",
set.seed(1)
tune.out <- tune(svm, y ~ ., data = dat[train, ], kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 1000), gamma = c(0.5, 1, 2, 3, 4) ))
summary(tune.out)
table(true = dat[-train, "y"], pred = predict(tune.out$best.model, newdata = dat[-train, ]))
#library(ROCR)
rocplot <- function(pred, truth, ...) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf, ...)
}
svmfit.opt <- svm(y ~ ., data = dat[train, ], kernel = "radial", gamma = 2, cost = 1, decision.values = TRUE)
fitted <- attributes(predict(svmfit.opt, dat[train, ], decision.values = TRUE))$decision.values
par(mfrow = c(1, 2))
rocplot(fitted, dat[train, "y"], main = "Training Data")
#par(mfrow = c(1, 2))
rocplot(fitted, dat[train, "y"], main = "Training Data")
svmfit.flex <- svm(y ∼ ., data = dat[train, ], kernel = "radial", gamma = 50, cost = 1, decision.values = TRUE)
svmfit.flex <- svm(y ~ ., data = dat[train, ], kernel = "radial", gamma = 50, cost = 1, decision.values = TRUE)
fitted <- attributes(predict(svmfit.flex, dat[train, ], decision.values = TRUE))$decision.values
rocplot(fitted, dat[train, "y"], add = TRUE, col = "red")
svmfit.flex <- svm(y ~ ., data = dat[train, ], kernel = "radial", gamma = 50, cost = 1, decision.values = TRUE)
fitted <- attributes(predict(svmfit.flex, dat[train, ], decision.values = TRUE))$decision.values
rocplot(fitted, dat[train, "y"], main = "Training Data")
rocplot(fitted, dat[train, "y"], add = TRUE, col = "red")
fitted <- attributes(predict(svmfit.opt, dat[-train, ], decision.values = TRUE))$decision.values
rocplot(fitted, dat[-train, "y"], main = "Test Data")
fitted <- attributes(predict(svmfit.flex, dat[-train, ], decision.values = TRUE))$decision.values
rocplot(fitted, dat[-train, "y"], add = TRUE, col = "red")
set.seed(1)
x <- rbind(x, matrix(rnorm(50*2), ncol = 2))
y <- c(y, rep(0, 50))
x[y == 0, 2] <- x[y == 0, 2] + 2
dat <- data.frame(x = x, y = as.factor(y))
par(mfrow = c(1, 1))
plot(x, col = (y + 1))
set.seed(1)
x <- rbind(x, matrix(rnorm(50*2), ncol = 2))
y <- c(y, rep(0, 50))
x[y == 0, 2] <- x[y == 0, 2] + 2
dat <- data.frame(x = x, y = as.factor(y))
par(mfrow = c(1, 1))
plot(x, col = (y + 1))
svmfit <- svm(y ~ ., data = dat, kernel = "radial", cost = 10, gamma = 1)
plot(svmfit, dat)
#library(ISLR)
names(Khan)
dim(Khan$xtest)
length(Khan$ytrain)
length(Khan$ytest)
table(Khan$ytrain)
table(Khan$ytest)
dat <- data.frame(x = Khan$xtrain, y = as.factor(Khan$ytrain))
out <- svm(y ~ ., data = dat, kernel = "linear", cost = 10)
summary(out)
table(out$fitted, dat$y)
dat.te <- data.frame(x = Khan$xtest, y = as.factor(Khan$ytest))
pred.te <- predict(out, newdata = dat.te)
table(pred.te, dat.te$y)
x1 <- runif(500) - 0.5
x2 <- runif(500) - 0.5
y <- 1*(x1^2 - x2^2 > 0)
plot(svmfit, dat)
plot(svmfit, dat)
svmfit.opt <- svm(y ~ ., data = dat[train, ], kernel = "radial", gamma = 2, cost = 1, decision.values = TRUE)
fitted1 <- attributes(predict(svmfit.opt, dat[train, ], decision.values = TRUE))$decision.values
#par(mfrow = c(1, 2))
rocplot(fitted1, dat[train, "y"], main = "Training Data")
#library(ROCR)
rocplot <- function(pred, truth, ...) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf, ...)
}
svmfit.opt <- svm(y ~ ., data = dat[train, ], kernel = "radial", gamma = 2, cost = 1, decision.values = TRUE)
fitted1 <- attributes(predict(svmfit.opt, dat[train, ], decision.values = TRUE))$decision.values
#par(mfrow = c(1, 2))
rocplot(fitted1, dat[train, "y"], main = "Training Data")
svmfit.opt <- svm(y ~ ., data = dat[train, ], kernel = "radial", gamma = 2, cost = 1, decision.values = TRUE)
fitted <- attributes(predict(svmfit.opt, dat[train, ], decision.values = TRUE))$decision.values
#par(mfrow = c(1, 2))
rocplot(fitted, dat[train, "y"], main = "Training Data")
set.seed(1)
tune.out <- tune(svm, y ~ ., data = dat[train, ], kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 1000), gamma = c(0.5, 1, 2, 3, 4) ))
setwd("~/GitHub/MATLAB")
setwd("~/GitHub/MATLAB")
# Use a for loop to run car_update 52 times.
print(a <- 150) # initial number of cars in Albany
print(b <- 150) # initial number of cars in Boston
for(i in 1:52) {
source("car_update.R")
}
# Use a for loop to run car_update 52 times
a <- 150 # initial number of cars in Albany
b <- 150 # initial number of cars in Boston
plot(c(0, 52), c(0, 200), xlab = "Week", ylab = "Count", type = "n")
for(i in 1:52) {
source("car_update.R")
points(i, a, col = "red", pch = 1)
points(i, b, col = "blue", pch = 18)
}
theta <- 0 # define to avoid error message
sigma <- 1 # define to avoid error message
zeta <- 0 # define to avoid error message
ans <- ((x - theta)*sqrt(2*pi)*sigma)^-1*exp(-1/2*(log(x - theta) - zeta)^2/sigma^2)
theta <- 0 # define to avoid error message
sigma <- 1 # define to avoid error message
zeta <- 0 # define to avoid error message
x <- 1 # define to avoid error message
ans <- ((x - theta)*sqrt(2*pi)*sigma)^-1*exp(-1/2*(log(x - theta) - zeta)^2/sigma^2)
ans
